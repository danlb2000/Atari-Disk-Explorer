/*   This file is part of Atari Disk Explorer.
     Copyright (C) 2014  Dan Boris (danlb_2000@yahoo.com)

    Atari Disk Explorer is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Atari Disk Explorer is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Atari Disk Explorer.  If not, see <http://www.gnu.org/licenses/>.
 */

using AtariDisk;
using AtariDisk.DiskImage;

namespace AtariDisk.FileSystems
{

    /// <summary>
    /// Class that represnts a DOS 2.0 filesystem
    /// </summary>
    public class fsDos20 : fsDOS2
    {

        byte[] bootRecord = {
	0x00, 0x03, 0x00, 0x07, 0x40, 0x15, 0x4C, 0x14, 0x07, 0x03, 0x03, 0x00,
	0x7C, 0x1A, 0x00, 0x04, 0x00, 0x7D, 0xCB, 0x07, 0xAC, 0x0E, 0x07, 0xF0,
	0x36, 0xAD, 0x12, 0x07, 0x85, 0x43, 0x8D, 0x04, 0x03, 0xAD, 0x13, 0x07,
	0x85, 0x44, 0x8D, 0x05, 0x03, 0xAD, 0x10, 0x07, 0xAC, 0x0F, 0x07, 0x18,
	0xAE, 0x0E, 0x07, 0x20, 0x6C, 0x07, 0x30, 0x17, 0xAC, 0x11, 0x07, 0xB1,
	0x43, 0x29, 0x03, 0x48, 0xC8, 0x11, 0x43, 0xF0, 0x0E, 0xB1, 0x43, 0xA8,
	0x20, 0x57, 0x07, 0x68, 0x4C, 0x2F, 0x07, 0xA9, 0xC0, 0xD0, 0x01, 0x68,
	0x0A, 0xA8, 0x60, 0x18, 0xA5, 0x43, 0x6D, 0x11, 0x07, 0x8D, 0x04, 0x03,
	0x85, 0x43, 0xA5, 0x44, 0x69, 0x00, 0x8D, 0x05, 0x03, 0x85, 0x44, 0x60,
	0x8D, 0x0B, 0x03, 0x8C, 0x0A, 0x03, 0xA9, 0x52, 0xA0, 0x40, 0x90, 0x04,
	0xA9, 0x57, 0xA0, 0x80, 0x8D, 0x02, 0x03, 0x8C, 0x03, 0x03, 0xA9, 0x31,
	0xA0, 0x0F, 0x8D, 0x00, 0x03, 0x8C, 0x06, 0x03, 0xA9, 0x03, 0x8D, 0xFF,
	0x12, 0xA9, 0x00, 0xA0, 0x80, 0xCA, 0xF0, 0x04, 0xA9, 0x01, 0xA0, 0x00,
	0x8D, 0x09, 0x03, 0x8C, 0x08, 0x03, 0x20, 0x59, 0xE4, 0x10, 0x1D, 0xCE,
	0xFF, 0x12, 0x30, 0x18, 0xA2, 0x40, 0xA9, 0x52, 0xCD, 0x02, 0x03, 0xF0,
	0x09, 0xA9, 0x21, 0xCD, 0x02, 0x03, 0xF0, 0x02, 0xA2, 0x80, 0x8E, 0x03,
	0x03, 0x4C, 0xA2, 0x07, 0xAE, 0x01, 0x13, 0xAD, 0x03, 0x03, 0x60, 0xAA,
	0x08, 0x14, 0x0B, 0xBE, 0x0A, 0xCB, 0x09, 0x00, 0x0B, 0xA6, 0x0B, 0x07,
	0x85, 0x44, 0xAD, 0x0A, 0x07, 0x8D, 0xD6, 0x12, 0xAD, 0x0C, 0x07, 0x85,
	0x43, 0xAD, 0x0D, 0x07, 0x85, 0x44, 0xAD, 0x0A, 0x07, 0x8D, 0x0C, 0x13,
	0xA2, 0x07, 0x8E, 0x0D, 0x13, 0x0E, 0x0C, 0x13, 0xB0, 0x0D, 0xA9, 0x00,
	0x9D, 0x11, 0x13, 0x9D, 0x29, 0x13, 0x9D, 0x31, 0x13, 0xF0, 0x36, 0xA0,
	0x05, 0xA9, 0x00, 0x91, 0x43, 0xE8, 0x8E, 0x01, 0x03, 0xA9, 0x53, 0x8D,
	0x02, 0x03, 0x20, 0x53, 0xE4, 0xA0, 0x02, 0xAD, 0xEA, 0x02, 0x29, 0x20,
	0xD0, 0x01, 0x88, 0x98, 0xAE, 0x0D, 0x13, 0x9D, 0x11, 0x13, 0xA5, 0x43,
	0x9D, 0x29, 0x13, 0xA5, 0x44, 0x9D, 0x31, 0x13, 0x20, 0x70, 0x08, 0x88,
	0xF0, 0x03, 0x20, 0x70, 0x08, 0xCA, 0x10, 0xB2, 0xAC, 0x09, 0x07, 0xA2,
	0x00, 0xA9, 0x00, 0x88, 0x10, 0x01, 0x98, 0x9D, 0x19, 0x13, 0x98, 0x30,
	0x0D, 0xA5, 0x43, 0x9D, 0x39, 0x13, 0xA5, 0x44, 0x9D, 0x49, 0x13, 0x20,
	0x70, 0x08, 0xE8, 0xE0, 0x10, 0xD0, 0xE2, 0xA5, 0x43, 0x8D, 0xE7, 0x02,
	0xA5, 0x44, 0x8D, 0xE8, 0x02, 0x4C, 0x7E, 0x08, 0x18, 0xA5, 0x43, 0x69,
	0x80, 0x85, 0x43, 0xA5, 0x44, 0x69, 0x00, 0x85, 0x44, 0x60, 0xA0, 0x7F
};


        public fsDos20(AbstractDiskImage diskImage)
            : base(diskImage)
        {
            maxFiles = 64;
            LastUsableSector = 719;
            TotalSectors = 720;
            SystemSectors = 12;

            sectorMap = new SectorMap(TotalSectors + 1);
        }

        public override void Attach()
        {
            if (attached) return;

            if (diskImage.NumberOfSectors() < 368) throw new InvalidFileSystemException();
            base.Attach();
        }

        public override void ReadSectorMap()
        {
            base.ReadMap(360, 10, 99, 0);
            Map[1] = SectorMap.SectorTypes.System;
            Map[2] = SectorMap.SectorTypes.System;
            Map[3] = SectorMap.SectorTypes.System;
            Map[720] = SectorMap.SectorTypes.Unusable;
            for (int i = 360; i <= 368; i++) Map[i] = SectorMap.SectorTypes.System;
        }

        public override void WriteSectorMap()
        {
            base.WriteMap(360, 10, 99, 0);
        }

        public override void SetFileFlags(DirectoryEntry entry, int flags)
        {
            if ((flags & 0x1) > 0) entry.OpenForOutput = true;
            if ((flags & 0x2) > 0) entry.CreatedInDos2 = true;
            if ((flags & 0x20) > 0) entry.Locked = true;
            if ((flags & 0x40) > 0) entry.EntryInUse = true;
            if ((flags & 0x80) > 0) entry.Deleted = true;
        }

        public override int GetFileFlags(DirectoryEntry entry)
        {
            int flags = 0;

            if (entry.OpenForOutput) flags |= 0x1;
            if (entry.CreatedInDos2) flags |= 0x2;
            if (entry.Locked) flags |= 0x20;
            if (entry.EntryInUse) flags |= 0x40;
            if (entry.Deleted) flags |= 0x80;

            return flags;
        }

        public override void Format(bool clearData)
        {
            // Start with DOS 2.0 format
            base.Format(clearData);

            byte[] sec = new byte[128];
            bootRecord.Copy(sec, 0, 0, 128);
            diskImage.WriteSector(1, sec);
            bootRecord.Copy(sec, 128, 0, 128);
            diskImage.WriteSector(2, sec);
            bootRecord.Copy(sec, 256, 0, 128);
            diskImage.WriteSector(3, sec);
        }
    }

}